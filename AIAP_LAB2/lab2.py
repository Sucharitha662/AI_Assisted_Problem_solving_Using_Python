# -*- coding: utf-8 -*-
"""Lab2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dGdGHMaztoLmcIAG9fsYCO9A0lOccU2U
"""

#Task2
# Function to check if a string is a palindrome
def is_palindrome(text):
  """Checks if a string is a palindrome (reads the same forwards and backwards, ignoring case and spaces).

  Args:
    text: The input string.

  Returns:
    True if the string is a palindrome, False otherwise.
  """
  # Convert to lowercase and remove spaces
  cleaned_text = "".join(char.lower() for char in text if char.isalnum())
  return cleaned_text == cleaned_text[::-1]

# Example usage:
print(is_palindrome("Racecar"))
print(is_palindrome("Madam, I'm Adam"))
print(is_palindrome("Hello world"))

#Task3
import math # Imports the math module to use mathematical functions like pi.

def calculate_area(shape, **kwargs): # Defines a function named calculate_area that takes 'shape' as a string and a variable number of keyword arguments (**kwargs) for dimensions.
  """Calculates the area of various shapes. # Docstring: explains what the function does.

  Args: # Docstring section: describes the arguments the function takes.
    shape: The name of the shape (e.g., "circle", "rectangle", "triangle"). # Describes the 'shape' argument.
    **kwargs: Keyword arguments for the shape's dimensions. # Describes the **kwargs argument.

  Returns: # Docstring section: describes what the function returns.
    The area of the shape, or None if the shape is not supported or # Describes the return value.
    dimensions are missing.
  """
  if shape == "circle": # Checks if the shape is "circle".
    radius = kwargs.get("radius") # Gets the value for the 'radius' keyword argument. Returns None if 'radius' is not provided.
    if radius is not None: # Checks if 'radius' was provided (is not None).
      return math.pi * radius**2 # Calculates and returns the area of a circle (pi * radius squared).
    else: # If 'radius' was not provided.
      print("Error: Radius is required for a circle.") # Prints an error message.
      return None # Returns None indicating an error.
  elif shape == "rectangle": # Checks if the shape is "rectangle".
    length = kwargs.get("length") # Gets the value for the 'length' keyword argument.
    width = kwargs.get("width") # Gets the value for the 'width' keyword argument.
    if length is not None and width is not None: # Checks if both 'length' and 'width' were provided.
      return length * width # Calculates and returns the area of a rectangle (length * width).
    else: # If 'length' or 'width' was not provided.
      print("Error: Length and width are required for a rectangle.") # Prints an error message.
      return None # Returns None indicating an error.
  elif shape == "triangle": # Checks if the shape is "triangle".
    base = kwargs.get("base") # Gets the value for the 'base' keyword argument.
    height = kwargs.get("height") # Gets the value for the 'height' keyword argument.
    if base is not None and height is not None: # Checks if both 'base' and 'height' were provided.
      return 0.5 * base * height # Calculates and returns the area of a triangle (0.5 * base * height).
    else: # If 'base' or 'height' was not provided.
      print("Error: Base and height are required for a triangle.") # Prints an error message.
      return None # Returns None indicating an error.
  else: # If the shape is not "circle", "rectangle", or "triangle".
    print(f"Error: Shape '{shape}' is not supported.") # Prints an error message indicating the shape is not supported.
    return None # Returns None indicating an error.

# Example Usage: # Comment indicating the start of example usage.
print(f"Area of circle with radius 5: {calculate_area('circle', radius=5)}") # Calls the function for a circle with radius 5 and prints the result.
print(f"Area of rectangle with length 4 and width 6: {calculate_area('rectangle', length=4, width=6)}") # Calls the function for a rectangle and prints the result.
print(f"Area of triangle with base 3 and height 7: {calculate_area('triangle', base=3, height=7)}") # Calls the function for a triangle and prints the result.
print(f"Area of square with side 4: {calculate_area('square', side=4)}") # Calls the function for an unsupported shape ("square") and prints the result (will print an error message and None).
print(f"Area of circle without radius: {calculate_area('circle')}") # Calls the function for a circle without providing the required 'radius' and prints the result (will print an error message and None).

#Task5
#Python code to calculate the sum of even numbers and sum of odd numbers from a list
# Get input from the user
input_list_str = input("Enter a list of numbers separated by spaces: ")

# Convert the input string to a list of integers
try:
  l = [int(x) for x in input_list_str.split()]

  # Initialize sums
  sum_even = 0
  sum_odd = 0

  # Iterate through the list and sum even and odd numbers
  for number in l:
    if number % 2 == 0:
      sum_even += number
    else:
      sum_odd += number

  # Print the results
  print(f"Sum of even numbers: {sum_even}")
  print(f"Sum of odd numbers: {sum_odd}")

except ValueError:
  print("Invalid input. Please enter numbers separated by spaces.")

#Task1
#function that reads a CSV file and calculates mean, min, max.
import pandas as pd

def analyze_csv(file_url):
    """
    Reads a CSV/Excel file from a URL and calculates mean, min, and max
    for all numeric columns automatically.
    """
    # Try reading as CSV; if it fails, try as Excel
    try:
        df = pd.read_csv(file_url)
    except Exception:
        df = pd.read_excel(file_url)

    # Confirm successful load
    print("‚úÖ CSV File Loaded Successfully!")
    print(df.head(), "\n")

    # Select only numeric columns
    numeric_cols = df.select_dtypes(include='number').columns

    if len(numeric_cols) == 0:
        print("‚ùå No numeric columns found in the file.")
        return None

    # Calculate statistics for each numeric column
    for col in numeric_cols:
        mean_val = df[col].mean()
        min_val = df[col].min()
        max_val = df[col].max()

        # Display results
        print(f"üìä Statistics for '{col}':")
        print(f"Mean: {mean_val}")
        print(f"Minimum: {min_val}")
        print(f"Maximum: {max_val}\n")

    # Create and return summary dictionary
    result = {
        col: {"mean": df[col].mean(), "min": df[col].min(), "max": df[col].max()}
        for col in numeric_cols
    }
    print(result)
    return result


# --- Example usage ---
# üëá Just replace this with your own link (can be a CSV or Excel file)
file_url = "/content/drive/MyDrive/AIAP/Lab_2/Task1_Excel.xlsx"

# Call the function (no need to provide column name)
result = analyze_csv(file_url)